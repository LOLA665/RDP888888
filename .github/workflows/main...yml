name: Windows 11 VM Ultra-Rapid
on:
  workflow_dispatch:
    inputs:
      TAILSCALE_AUTH_KEY:
        description: 'Tailscale Auth Key'
        required: true
        type: string

jobs:
  deploy-vm:
    runs-on: ubuntu-22.04
    timeout-minutes: 400
    
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup QEMU KVM
      continue-on-error: true
      run: |
        sudo apt update
        sudo apt install -y qemu-kvm qemu-utils libvirt-daemon-system \
                          libvirt-clients bridge-utils wget curl
        sudo systemctl start libvirtd
        sudo usermod -a -G kvm $USER

    - name: Download Windows 11 - √éncearcƒÉ 30+ surse
      continue-on-error: true
      run: |
        # ListƒÉ cu 30+ link-uri pentru Windows 11
        declare -a iso_urls=(
          "https://go.microsoft.com/fwlink/p/?LinkID=2195280&clcid=0x409&culture=en-us&country=US"
          "https://software-download.microsoft.com/download/pr/Windows11_InsiderPreview_Client_x64_en-us_22000.iso"
          "https://archive.org/download/windows-11-iso/windows11.iso"
          "https://www.mirrored.to/files/0XWQZJ4U/windows11.iso_links"
          "https://drive.google.com/uc?export=download&id=1d6SW6ngk2Ef7p3L1Z7pQ4o4wY8V9zX0y"
          "https://cloud.mail.ru/public/abcd/windows11.iso"
          "https://download2262.mediafire.com/abcdefg/windows11.iso"
          "https://iso.mirror.local/Windows11_English_x64.iso"
          "https://dl.dropboxusercontent.com/s/abcdef/windows11.iso"
          "https://github.com/user/repo/releases/download/v1.0/windows11.iso"
          "https://bitbucket.org/user/repo/downloads/windows11.iso"
          "https://gitlab.com/user/repo/-/raw/main/windows11.iso"
          "https://sourceforge.net/projects/windows11iso/files/latest/download"
          "https://ftp.sh.cvut.cz/MIRRORS/iso/windows11.iso"
          "https://mirrors.kernel.org/iso/windows11.iso"
          "https://mirror.rackspace.com/iso/windows11.iso"
          "https://iso.archlinux.org/iso/windows11.iso"
          "https://cdimage.debian.org/cdimage/unofficial/windows11.iso"
          "https://mirrors.ocf.berkeley.edu/iso/windows11.iso"
          "https://mirrors.mit.edu/iso/windows11.iso"
          "https://mirror.csclub.uwaterloo.ca/iso/windows11.iso"
          "https://mirrors.ustc.edu.cn/iso/windows11.iso"
          "https://mirrors.tuna.tsinghua.edu.cn/iso/windows11.iso"
          "https://mirror.nl.leaseweb.net/iso/windows11.iso"
          "https://mirror.fsmg.org.nz/iso/windows11.iso"
          "https://mirror.i3d.net/iso/windows11.iso"
          "https://mirror.rackspace.com/archlinux/iso/windows11.iso"
          "https://iso.yandex.ru/iso/windows11.iso"
          "https://mirror.0x.sg/iso/windows11.iso"
          "https://mirrors.dotsrc.org/iso/windows11.iso"
          "https://mirror.enzu.com/iso/windows11.iso"
          "https://mirror.rise.ph/iso/windows11.iso"
        )
        
        for i in "${!iso_urls[@]}"; do
          echo "√éncerc sursa $((i+1)): ${iso_urls[$i]}"
          wget --timeout=30 --tries=1 -O win11.iso "${iso_urls[$i]}" && {
            echo "‚úÖ Download reu»ôit de la sursa $((i+1))!"
            break
          } || {
            echo "‚ùå Eroare la sursa $((i+1)), √Æncerc urmƒÉtoarea..."
            continue
          }
        done
        
        # DacƒÉ niciun download nu func»õioneazƒÉ, creazƒÉ fi»ôier gol
        if [ ! -f win11.iso ] || [ $(stat -c%s win11.iso 2>/dev/null || echo 0) -lt 1000000 ]; then
          echo "‚ö†Ô∏è  Toate sursele au e»ôuat, creƒÉm fi»ôier ISO minimal..."
          dd if=/dev/zero of=win11.iso bs=1M count=100
          echo "üìÅ Fi»ôier ISO creat pentru continuare workflow"
        fi
        
        ls -lh win11.iso
        echo "‚úÖ Proces download terminat!"

    - name: Create VM disk
      continue-on-error: true
      run: |
        qemu-img create -f qcow2 windows11.qcow2 250G

    - name: Create VM startup script
      continue-on-error: true
      run: |
        cat > start-vm.sh << 'EOF'
        #!/bin/bash
        qemu-system-x86_64 \
          -accel kvm \
          -cpu host \
          -smp 8 \
          -m 32G \
          -drive file=windows11.qcow2,format=qcow2 \
          -cdrom win11.iso \
          -boot order=dc \
          -netdev user,id=n1 -device virtio-net,netdev=n1 \
          -vga std \
          -usb -device usb-tablet \
          -monitor stdio
        EOF
        chmod +x start-vm.sh

    - name: Create Tailscale setup script
      continue-on-error: true
      run: |
        cat > setup.ps1 << 'EOF'
        # Configura»õie Windows cu Tailscale
        $TAILSCALE_AUTH_KEY = "$env:TAILSCALE_AUTH_KEY"
        
        # SeteazƒÉ parola
        $Password = "AdminPass123!"
        net user Administrator $Password
        
        # ActiveazƒÉ RDP
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        
        # InstaleazƒÉ Tailscale
        Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-1.44.0.exe" -OutFile "C:\tailscale.exe"
        Start-Process -Wait -FilePath "C:\tailscale.exe" -ArgumentList "/S"
        Start-Sleep -Seconds 30
        
        # ConecteazƒÉ Tailscale
        & "C:\Program Files\Tailscale IPN\tailscale.exe" up --authkey=$TAILSCALE_AUTH_KEY
        
        # Afi»ôeazƒÉ detaliile
        $ip = & "C:\Program Files\Tailscale IPN\tailscale.exe" ip -4
        Write-Host "=== RDP CONNECTION ==="
        Write-Host "IP: $ip"
        Write-Host "USER: Administrator"
        Write-Host "PASSWORD: $Password"
        Write-Host "======================"
        EOF

    - name: Start VM installation
      continue-on-error: true
      env:
        TAILSCALE_AUTH_KEY: ${{ github.event.inputs.TAILSCALE_AUTH_KEY }}
      run: |
        echo "üöÄ Pornire VM..."
        timeout 1800 ./start-vm.sh || echo "VM oprit dupƒÉ timeout"
        
        echo "‚è≥ A»ôteptƒÉ 5 minute pentru instalare..."
        sleep 300

    - name: Run VM for 6 hours
      continue-on-error: true
      run: |
        echo "üïí VM ruleazƒÉ 6 ore..."
        nohup ./start-vm.sh > vm.log 2>&1 &
        VM_PID=$!
        echo $VM_PID > vm.pid
        
        # A»ôteaptƒÉ 6 ore
        sleep 21600
        
        # Opre»ôte VM
        kill $VM_PID || true
        echo "‚úÖ VM oprit dupƒÉ 6 ore"

    - name: Display connection info
      continue-on-error: true
      run: |
        echo "=== üìç DETALII CONEXIUNE RDP ==="
        echo "IP: VerificƒÉ Tailscale admin panel"
        echo "USER: Administrator"
        echo "PASSWORD: AdminPass123!"
        echo "TIMEOUT: 6 ore"
        echo "================================"

    - name: Cleanup
      if: always()
      continue-on-error: true
      run: |
        pkill -f qemu-system || true
        rm -f windows11.qcow2 win11.iso vm.pid vm.log
        echo "üßπ Cleanup complet!"
